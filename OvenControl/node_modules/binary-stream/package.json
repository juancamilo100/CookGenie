{
  "_args": [
    [
      {
        "raw": "binary-stream@git+https://github.com/GEMakers/binary-stream.git",
        "scope": null,
        "escapedName": "binary-stream",
        "name": "binary-stream",
        "rawSpec": "git+https://github.com/GEMakers/binary-stream.git",
        "spec": "git+https://github.com/GEMakers/binary-stream.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:GEMakers/binary-stream.git",
          "sshUrl": "git+ssh://git@github.com/GEMakers/binary-stream.git",
          "httpsUrl": "git+https://github.com/GEMakers/binary-stream.git",
          "gitUrl": "git://github.com/GEMakers/binary-stream.git",
          "shortcut": "github:GEMakers/binary-stream",
          "directUrl": "https://raw.githubusercontent.com/GEMakers/binary-stream/master/package.json"
        }
      },
      "/Users/lauraartunduaga/Documents/CodeLouisville/Hackathon/CookGEnie/node_modules/gea-adapter-usb"
    ]
  ],
  "_from": "git+https://github.com/GEMakers/binary-stream.git",
  "_id": "binary-stream@0.1.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/binary-stream",
  "_phantomChildren": {},
  "_requested": {
    "raw": "binary-stream@git+https://github.com/GEMakers/binary-stream.git",
    "scope": null,
    "escapedName": "binary-stream",
    "name": "binary-stream",
    "rawSpec": "git+https://github.com/GEMakers/binary-stream.git",
    "spec": "git+https://github.com/GEMakers/binary-stream.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:GEMakers/binary-stream.git",
      "sshUrl": "git+ssh://git@github.com/GEMakers/binary-stream.git",
      "httpsUrl": "git+https://github.com/GEMakers/binary-stream.git",
      "gitUrl": "git://github.com/GEMakers/binary-stream.git",
      "shortcut": "github:GEMakers/binary-stream",
      "directUrl": "https://raw.githubusercontent.com/GEMakers/binary-stream/master/package.json"
    }
  },
  "_requiredBy": [
    "/gea-adapter-usb",
    "/gea-sdk"
  ],
  "_resolved": "git+https://github.com/GEMakers/binary-stream.git#b04f700140f85b8547f67e510a39e9b0e5187471",
  "_shasum": "d1882435d76a9f167ac0937eeb5d86740b50eb06",
  "_shrinkwrap": null,
  "_spec": "binary-stream@git+https://github.com/GEMakers/binary-stream.git",
  "_where": "/Users/lauraartunduaga/Documents/CodeLouisville/Hackathon/CookGEnie/node_modules/gea-adapter-usb",
  "author": {
    "name": "Christopher Baker",
    "email": "christopher.baker2@ge.com"
  },
  "bugs": {
    "url": "https://github.com/GEMakers/binary-stream/issues"
  },
  "dependencies": {},
  "description": "A binary stream reader and writer",
  "devDependencies": {},
  "gitHead": "b04f700140f85b8547f67e510a39e9b0e5187471",
  "homepage": "https://github.com/GEMakers/binary-stream",
  "keywords": [
    "binary",
    "stream",
    "read",
    "write"
  ],
  "name": "binary-stream",
  "optionalDependencies": {},
  "readme": "# Progressive Stream IO\n\nThis node.js package provides a set of classes used to progressively read and write to a stream or buffer.\n\n## Table of Contents\n\n- [Installation](#installation)\n- [API](#api)\n  - [stream.BIG_ENDIAN](#streambig_endian)\n  - [stream.LITTLE_ENDIAN](#streamlittle_endian)\n  - [stream.Reader(data, endianess)](#streamreaderdata-endianess)\n    - [reader.readBytes(count)](#readerreadbytescount)\n    - [reader.readAscii(count)](#readerreadasciicount)\n    - [reader.readHex(count)](#readerreadhexcount)\n    - [reader.readUInt8()](#readerreaduint8)\n    - [reader.readInt8()](#readerreadint8)\n    - [reader.readUInt16()](#readerreaduint16)\n    - [reader.readInt16()](#readerreadint16)\n    - [reader.readUInt32()](#readerreaduint32)\n    - [reader.readInt32()](#readerreadint32)\n  - [stream.Writer(size, endianess)](#streamwritersize-endianess)\n    - [writer.writeBytes(value)](#writerwritebytesvalue)\n    - [writer.writeAscii(value)](#writerwriteasciivalue)\n    - [writer.writeHex(value)](#writerwritehexvalue)\n    - [writer.writeUInt8(value)](#writerwriteuint8)\n    - [writer.writeInt8(value)](#writerwriteint8)\n    - [writer.writeUInt16(value)](#writerwriteuint16)\n    - [writer.writeInt16(value)](#writerwriteint16)\n    - [writer.writeUInt32(value)](#writerwriteuint32)\n    - [writer.writeInt32(value)](#writerwriteint32)\n    - [writer.toArray()](#writertoarray)\n\n## Installation\nTo install this application using the node.js package manager, issue the following commands:\n\n```\nnpm install git+https://github.com/GEMakers/binary-stream.git\n```\n\nTo include this package in your application, use the *require* function.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n```\n\n## API\nBelow is the documentation for each of the functions provided by this plugin, as well as a few examples showing how to use them.\n\n### *stream.BIG_ENDIAN*\nThis constant is used to denote that integers should be serialized using big endian. For example, if the 16 bit integer 0x1234 was serialized to a byte array, the resulting contents will be [0x12, 0x34].\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nconsole.log(stream.BIG_ENDIAN); // \"big\"\n```\n\n### *stream.LITTLE_ENDIAN*\nThis constant is used to denote that integers should be serialized using little endian. For example, if the 16 bit integer 0x1234 was serialized to a byte array, the resulting contents will be [0x34, 0x12].\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nconsole.log(stream.LITTLE_ENDIAN); // \"little\"\n```\n\n### *stream.Reader(data, endianess)*\nThe stream reader class is used to read values with the specified *endianess* from a *data* buffer. If *endianess* is undefined, it is assumed to be little endian.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar reader = new stream.Reader([0x12, 0x34, 0x56, 0x78], stream.BIG_ENDIAN);\nconsole.log(reader.readUInt16()); // 4660\nconsole.log(reader.readUInt8());  // 86\nconsole.log(reader.readUInt8());  // 120\ndelete reader;\n```\n\n### *reader.readBytes(count)*\nReads *count* bytes from the stream and returns as a byte array. If *count* is undefined, it is assumed to be the length of the stream.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar reader = new stream.Reader([0x12, 0x34, 0x56, 0x78]);\nconsole.log(reader.readBytes(2)); // [ 18, 52 ]\ndelete reader;\n```\n\n### *reader.readAscii(count)*\nReads *count* bytes from the stream and returns as an ASCII null terminated string. If *count* is undefined, it is assumed to be the length of the stream.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar reader = new stream.Reader([0x73, 0x74, 0x72, 0x65, 0x61, 0x6d]);\nconsole.log(reader.readAscii()); // \"stream\"\ndelete reader;\n```\n\n### *reader.readHex(count)*\nReads *count* bytes from the stream and returns as a hexadecimal string. If *count* is undefined, it is assumed to be the length of the stream.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar reader = new stream.Reader([0x12, 0x34, 0x56, 0x78]);\nconsole.log(reader.readHex()); // \"12345678\"\ndelete reader;\n```\n\n### *reader.readUInt8()*\nReads an 8-bit unsigned integer from the stream.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar reader = new stream.Reader([0xfe, 0xff]);\nconsole.log(reader.readUInt8()); // 254\nconsole.log(reader.readUInt8()); // 255\ndelete reader;\n```\n\n### *reader.readInt8()*\nReads an 8-bit signed integer from the stream.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar reader = new stream.Reader([0xfe, 0xff]);\nconsole.log(reader.readInt8()); // -2\nconsole.log(reader.readInt8()); // -1\ndelete reader;\n```\n\n### *reader.readUInt16()*\nReads a 16-bit unsigned integer from the stream.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar reader = new stream.Reader([0xfe, 0xff]);\nconsole.log(reader.readUInt16()); // 65534\ndelete reader;\n```\n\n### *reader.readInt16()*\nReads a 16-bit signed integer from the stream.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar reader = new stream.Reader([0xfe, 0xff]);\nconsole.log(reader.readInt16()); // -2\ndelete reader;\n```\n\n### *reader.readUInt32()*\nReads a 32-bit unsigned integer from the stream.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar reader = new stream.Reader([0xff, 0xff, 0xff, 0xff]);\nconsole.log(reader.readUInt32()); // 4294967295\ndelete reader;\n```\n\n### *reader.readInt32()*\nReads a 32-bit signed integer from the stream.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar reader = new stream.Reader([0xff, 0xff, 0xff, 0xff]);\nconsole.log(reader.readInt32()); // -1\ndelete reader;\n```\n\n### *stream.Writer(size, endianess)*\nThe stream writer class is used to write values with the specified *endianess* to a buffer of the defined max *size*. If *endianess* is undefined, it is assumed to be little endian.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar writer = new stream.Writer(4, stream.BIG_ENDIAN);\nwriter.writeUInt16(0x1234);\nwriter.writeUInt8(0x56);\nwriter.writeUInt8(0x78);\nconsole.log(writer.toArray()); // [ 18, 52, 86, 120 ]\ndelete writer;\n```\n\n### *writer.writeBytes(value)*\nWrites the byte array *value* to the stream.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar writer = new stream.Writer(2);\nwriter.writeBytes([0x12, 0x34]);\nconsole.log(writer.toArray()); // [ 18, 52 ]\ndelete writer;\n```\n\n### *writer.writeAscii(value)*\nWrites the ASCII null terminated string *value* to the stream.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar writer = new stream.Writer(6);\nwriter.writeAscii(\"stream\");\nconsole.log(writer.toArray()); // [ 115, 116, 114, 101, 97, 109 ]\ndelete writer;\n```\n\n### *writer.writeHex(value)*\nWrites the hexadecimal string *value* to the stream.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar writer = new stream.Writer(6);\nwriter.writeHex(\"ab12cd34ef56\");\nconsole.log(writer.toArray()); // [ 171, 18, 205, 52, 239, 86 ]\ndelete writer;\n```\n\n### *writer.writeUInt8()*\nWrites an 8-bit unsigned integer to the stream.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar writer = new stream.Writer(2);\nwriter.writeUInt8(254);\nwriter.writeUInt8(255);\nconsole.log(writer.toArray()); // [ 254, 255 ]\ndelete writer;\n```\n\n### *writer.writeInt8()*\nWrites an 8-bit signed integer to the stream.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar writer = new stream.Writer(2);\nwriter.writeInt8(-2);\nwriter.writeInt8(-1);\nconsole.log(writer.toArray()); // [ 254, 255 ]\ndelete writer;\n```\n\n### *writer.writeUInt16()*\nWrites a 16-bit unsigned integer to the stream.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar writer = new stream.Writer(2);\nwriter.writeUInt16(65534);\nconsole.log(writer.toArray()); // [ 254, 255 ]\ndelete writer;\n```\n\n### *writer.writeInt16()*\nWrites a 16-bit signed integer to the stream.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar writer = new stream.Writer(2);\nwriter.writeInt16(-2);\nconsole.log(writer.toArray()); // [ 254, 255 ]\ndelete writer;\n```\n\n### *writer.writeUInt32()*\nWrites a 32-bit unsigned integer to the stream.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar writer = new stream.Writer(4);\nwriter.writeUInt32(4294967294);\nconsole.log(writer.toArray()); // [ 254, 255, 255, 255 ]\ndelete writer;\n```\n\n### *writer.writeInt32()*\nWrites a 32-bit signed integer to the stream.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar writer = new stream.Writer(4);\nwriter.writeInt32(-2);\nconsole.log(writer.toArray()); // [ 254, 255, 255, 255 ]\ndelete writer;\n```\n\n\n### *writer.toArray()*\nReturns the content written to the stream as a byte array.\n\n``` javascript\nvar stream = require(\"binary-stream\");\n\nvar writer = new stream.Writer(10);\nwriter.writeInt32(-2);\nconsole.log(writer.toArray()); // [ 254, 255, 255, 255 ]\ndelete writer;\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/GEMakers/binary-stream.git"
  },
  "version": "0.1.0"
}
