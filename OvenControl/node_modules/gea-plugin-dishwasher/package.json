{
  "_args": [
    [
      {
        "raw": "gea-plugin-dishwasher@git+https://github.com/GEMakers/gea-plugin-dishwasher.git",
        "scope": null,
        "escapedName": "gea-plugin-dishwasher",
        "name": "gea-plugin-dishwasher",
        "rawSpec": "git+https://github.com/GEMakers/gea-plugin-dishwasher.git",
        "spec": "git+https://github.com/GEMakers/gea-plugin-dishwasher.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:GEMakers/gea-plugin-dishwasher.git",
          "sshUrl": "git+ssh://git@github.com/GEMakers/gea-plugin-dishwasher.git",
          "httpsUrl": "git+https://github.com/GEMakers/gea-plugin-dishwasher.git",
          "gitUrl": "git://github.com/GEMakers/gea-plugin-dishwasher.git",
          "shortcut": "github:GEMakers/gea-plugin-dishwasher",
          "directUrl": "https://raw.githubusercontent.com/GEMakers/gea-plugin-dishwasher/master/package.json"
        }
      },
      "/Users/lauraartunduaga/Documents/CodeLouisville/Hackathon/CookGEnie/node_modules/green-bean"
    ]
  ],
  "_from": "git+https://github.com/GEMakers/gea-plugin-dishwasher.git",
  "_id": "gea-plugin-dishwasher@0.1.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/gea-plugin-dishwasher",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gea-plugin-dishwasher@git+https://github.com/GEMakers/gea-plugin-dishwasher.git",
    "scope": null,
    "escapedName": "gea-plugin-dishwasher",
    "name": "gea-plugin-dishwasher",
    "rawSpec": "git+https://github.com/GEMakers/gea-plugin-dishwasher.git",
    "spec": "git+https://github.com/GEMakers/gea-plugin-dishwasher.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:GEMakers/gea-plugin-dishwasher.git",
      "sshUrl": "git+ssh://git@github.com/GEMakers/gea-plugin-dishwasher.git",
      "httpsUrl": "git+https://github.com/GEMakers/gea-plugin-dishwasher.git",
      "gitUrl": "git://github.com/GEMakers/gea-plugin-dishwasher.git",
      "shortcut": "github:GEMakers/gea-plugin-dishwasher",
      "directUrl": "https://raw.githubusercontent.com/GEMakers/gea-plugin-dishwasher/master/package.json"
    }
  },
  "_requiredBy": [
    "/green-bean"
  ],
  "_resolved": "git+https://github.com/GEMakers/gea-plugin-dishwasher.git#c32a53a55ba7169041faea42d7ed2e2847a7b489",
  "_shasum": "56864b6f2b060de5420a802b1aa2095a9e6fa1b5",
  "_shrinkwrap": null,
  "_spec": "gea-plugin-dishwasher@git+https://github.com/GEMakers/gea-plugin-dishwasher.git",
  "_where": "/Users/lauraartunduaga/Documents/CodeLouisville/Hackathon/CookGEnie/node_modules/green-bean",
  "author": {
    "name": "Christopher Baker",
    "email": "christopher.baker2@ge.com"
  },
  "bugs": {
    "url": "https://github.com/GEMakers/gea-plugin-dishwasher/issues"
  },
  "dependencies": {
    "gea-sdk": "git+https://github.com/GEMakers/gea-sdk.git"
  },
  "description": "Dishwasher plugin for General Electric Appliance SDK",
  "devDependencies": {},
  "gitHead": "c32a53a55ba7169041faea42d7ed2e2847a7b489",
  "homepage": "http://www.ge.com/",
  "keywords": [
    "GE",
    "GEA",
    "SDK",
    "General Electric",
    "dishwasher"
  ],
  "name": "gea-plugin-dishwasher",
  "optionalDependencies": {},
  "readme": "# Dishwasher\n**General Electric Appliances Dishwasher Software Development Kit**\n\nThis node.js package provides functionality for communicating with a dishwasher via the [General Electric Appliance Software Development Kit](https://github.com/GEMakers/gea-sdk). In order to use this software, you must first connect your dishwasher to your computer using the [Green Bean](https://github.com/GEMakers/green-bean).\n\n## Overview\n\n1. [Using the Software](#using-the-software)\n  - [dishwasher.cycleStatus](#dishwashercyclestatus)\n  - [dishwasher.operatingMode](#dishwasheroperatingmode)\n  - [dishwasher.disabledFeatures](#dishwasherdisabledfeatures)\n  - [dishwasher.reminders](#dishwasherreminders)\n  - [dishwasher.rates](#dishwasherrates)\n  - [dishwasher.turbidityCalibration](#dishwasherturbiditycalibration)\n  - [dishwasher.doorCount](#dishwasherdoorcount)\n  - [dishwasher.userConfiguration](#dishwasheruserconfiguration)\n  - [dishwasher.error](#dishwashererror)\n  - [dishwasher.cycleCounts](#dishwashercyclecounts)\n  - [dishwasher.continuousCycle](#dishwashercontinuouscycle)\n  - [dishwasher.controlLock](#dishwashercontrollock)\n  - [dishwasher.personality](#dishwasherpersonality)\n  - [dishwasher.diverterCalibration](#dishwasherdivertercalibration)\n  - [dishwasher.cycleState](#dishwashercyclestate)\n  - [dishwasher.analogData](#dishwasheranalogdata)\n  - [dishwasher.cycleData0](#dishwashercycledata0)\n  - [dishwasher.cycleData1](#dishwashercycledata1)\n  - [dishwasher.cycleData2](#dishwashercycledata2)\n  - [dishwasher.cycleData3](#dishwashercycledata3)\n  - [dishwasher.cycleData4](#dishwashercycledata4)\n  - [dishwasher.dryDrainCounters](#dishwasherdrydraincounters)\n  - [dishwasher.tubLight](#dishwashertublight)\n1. [Appendix](#appendix)\n  - [Operating mode](#operating-mode)\n  - [Disabled features](#disabled-features)\n  - [Reminders](#reminders)\n  - [User configuration](#user-configuration)\n  - [Control lock](#control-lock)\n  - [Personality source](#personality-source)\n  - [Cycle state](#cycle-state)\n\n### Using the Software\nBelow are a few node.js applications that demonstrate how to use this package to interact with a dishwasher.\n\n### *dishwasher.cycleStatus*\nThe cycle status is an object with the following fields:\n- cycleRunning (zero if the cycle is not running, non-zero if running)\n- activeCycle (the active cycle, see [cycle state](#cycle-state))\n- activeCycleStep (the current step in the active cycle)\n- stepsExecuted (the number of steps executed in the cycle)\n- stepsEstimated (the estimated number of steps in the cycle)\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.cycleStatus.read(function (value) {\n        console.log(\"cycle status is:\", value);\n    });\n\n    dishwasher.cycleStatus.subscribe(function (value) {\n        console.log(\"cycle status changed:\", value);\n    });\n\n    dishwasher.cycleStatus.write({\n        cycleRunning: 1,\n        activeCycle: 2,\n        activeCycleStep: 1,\n        stepsExecuted: 1,\n        stepsEstimated: 2\n    });\n});\n```\n\n### *dishwasher.operatingMode*\nThe operating mode is an integer value of the [operating mode](#operating-mode) enumeration.\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.operatingMode.read(function (value) {\n        console.log(\"operating mode is:\", value);\n    });\n\n    dishwasher.operatingMode.subscribe(function (value) {\n        console.log(\"operating mode changed:\", value);\n    });\n\n    dishwasher.operatingMode.write(1);\n});\n```\n\n### *dishwasher.disabledFeatures*\nThe disabled features are an integer value of the [disabled features](#disabled-features) bit field.\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.disabledFeatures.read(function (value) {\n        console.log(\"disabled features are:\", value);\n    });\n\n    dishwasher.disabledFeatures.subscribe(function (value) {\n        console.log(\"disabled features changed:\", value);\n    });\n\n    dishwasher.disabledFeatures.write(3);\n});\n```\n\n### *dishwasher.reminders*\nThe reminders are an integer value of the [reminders](#reminders) bit field.\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.reminders.read(function (value) {\n        console.log(\"reminders are:\", value);\n    });\n\n    dishwasher.reminders.subscribe(function (value) {\n        console.log(\"reminders changed:\", value);\n    });\n\n    dishwasher.reminders.write(0);\n});\n```\n\n### *dishwasher.rates*\nThe rates are an object with the following fields:\n- fillRate (the rate that water fills)\n- drainRate (the rate that water drains)\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.rates.read(function (value) {\n        console.log(\"rates are:\", value);\n    });\n\n    dishwasher.rates.subscribe(function (value) {\n        console.log(\"rates changed:\", value);\n    });\n\n    dishwasher.rates.write({\n        fillRate: 0,\n        drainRate: 0\n    });\n});\n```\n\n### *dishwasher.turbidityCalibration*\nThe turbidity calibration is an integer value used to calibrate the sensor readings.\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.turbidityCalibration.read(function (value) {\n        console.log(\"turbidity calibration is:\", value);\n    });\n\n    dishwasher.turbidityCalibration.subscribe(function (value) {\n        console.log(\"turbidity calibration changed:\", value);\n    });\n\n    dishwasher.turbidityCalibration.write(0);\n});\n```\n\n### *dishwasher.doorCount*\nThe door count is a read-only integer value that is incremented each time the door is opened.\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.doorCount.read(function (value) {\n        console.log(\"door count is:\", value);\n    });\n\n    dishwasher.doorCount.subscribe(function (value) {\n        console.log(\"door count changed:\", value);\n    });\n});\n```\n\n### *dishwasher.userConfiguration*\nThe user configuration is an array of bytes representing the [user configuration](#user-configuration) bit field.\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.userConfiguration.read(function (value) {\n        console.log(\"user configuration is:\", value);\n    });\n\n    dishwasher.userConfiguration.subscribe(function (value) {\n        console.log(\"user configuration changed:\", value);\n    });\n\n    dishwasher.userConfiguration.write([0, 0, 0]);\n});\n```\n\n### *dishwasher.error*\nThe error is an object with the following fields:\n- errorId (the error id)\n- errorState (zero if the error is cleared, one if the error is set)\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.error.read(function (value) {\n        console.log(\"error is:\", value);\n    });\n\n    dishwasher.error.subscribe(function (value) {\n        console.log(\"error changed:\", value);\n    });\n\n    dishwasher.error.write({\n        errorId: 0,\n        errorState: 1\n    });\n});\n```\n\n### *dishwasher.cycleCounts*\nThe cycle counts are an object with the following fields:\n- startedCount (the number of times a cycle was started)\n- completedCount (the number of times a cycle was completed)\n- resetCount (the number of times a cycle was reset)\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.cycleCounts.read(function (value) {\n        console.log(\"cycle counts are:\", value);\n    });\n\n    dishwasher.cycleCounts.subscribe(function (value) {\n        console.log(\"cycle counts changed:\", value);\n    });\n\n    dishwasher.cycleCounts.write({\n        startedCount: 2,\n        completedCount: 1,\n        resetCount: 0\n    });\n});\n```\n\n### *dishwasher.continuousCycle*\nThe cycle counts are an object with the following fields:\n- cycleToRun (the cycle to run, see [cycle state](#cycle-state))\n- cyclesRemaining (the number of remaining cycles)\n- minutesBetweenCycles (the number of minutes between cycles)\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.continuousCycle.read(function (value) {\n        console.log(\"continuous cycle is:\", value);\n    });\n\n    dishwasher.continuousCycle.subscribe(function (value) {\n        console.log(\"continuous cycle changed:\", value);\n    });\n\n    dishwasher.continuousCycle.write({\n        cycleToRun: 1,\n        cyclesRemaining: 0,\n        minutesBetweenCycles: 5\n    });\n});\n```\n\n### *dishwasher.controlLock*\nThe control lock is an integer value of the [control lock](#control-lock) enumeration.\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.controlLock.read(function (value) {\n        console.log(\"control lock is:\", value);\n    });\n\n    dishwasher.controlLock.subscribe(function (value) {\n        console.log(\"control lock changed:\", value);\n    });\n\n    dishwasher.controlLock.write(0x55);\n});\n```\n\n### *dishwasher.personality*\nThe personality is an object with the following fields:\n- personality (the personality index, between 0 and 15, inclusive)\n- source (the cycle to run, see [personality source](#personality-source))\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.personality.read(function (value) {\n        console.log(\"personality is:\", value);\n    });\n\n    dishwasher.personality.subscribe(function (value) {\n        console.log(\"personality changed:\", value);\n    });\n\n    dishwasher.personality.write({\n        personality: 15,\n        source: 1\n    });\n});\n```\n\n### *dishwasher.diverterCalibration*\nThe diverter calibration is an object with the following fields:\n- positionATime (the time at position A)\n- positionBTime (the time at position B)\n- positionCTime (the time at position C)\n- positionDTime (the time at position D)\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.diverterCalibration.read(function (value) {\n        console.log(\"diverter calibration is:\", value);\n    });\n\n    dishwasher.diverterCalibration.subscribe(function (value) {\n        console.log(\"diverter calibration changed:\", value);\n    });\n\n    dishwasher.diverterCalibration.write({\n        positionATime: 1,\n        positionBTime: 2,\n        positionCTime: 3,\n        positionDTime: 4\n    });\n});\n```\n\n### *dishwasher.cycleState*\nThe cycle state is an integer value of the [cycle state](#cycle-state) enumeration.\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.cycleState.read(function (value) {\n        console.log(\"cycle state is:\", value);\n    });\n\n    dishwasher.cycleState.subscribe(function (value) {\n        console.log(\"cycle state changed:\", value);\n    });\n\n    dishwasher.cycleState.write(9);\n});\n```\n\n### *dishwasher.analogData*\nThe analog data is a read-only byte array of analog input sensor values.\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.analogData.read(function (value) {\n        console.log(\"analog data is:\", value);\n    });\n\n    dishwasher.analogData.subscribe(function (value) {\n        console.log(\"analog data changed:\", value);\n    });\n});\n```\n\n### *dishwasher.cycleData0*\nThe cycle data is an object with the following fields:\n- cycleTime (the time of the cycle)\n- cycleNumber (the number of the cycle)\n- cycleDurationInMinutes (the duration of the cycle in minutes)\n- cycleCompleted (zero if the cycle is not complete, one if incomplete)\n- cycleMinimumTemperatureInFahrenheit (the minimum cycle temperature in Fahrenheit)\n- cycleMaximumTemperatureInFahrenheit (the maximum cycle temperature in Fahrenheit)\n- cycleFinalCirculationTemperatureInFahrenheit (the final circulation temperature in Fahrenheit)\n- cycleMinimumTurbidityInNTU (the minimum turbidity value in NTU)\n- cycleMaximumTurbidityInNTU (the maximum turbidity value in NTU)\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.cycleData0.read(function (value) {\n        console.log(\"cycle data 0 is:\", value);\n    });\n\n    dishwasher.cycleData0.subscribe(function (value) {\n        console.log(\"cycle data 0 changed:\", value);\n    });\n\n    dishwasher.cycleData0.write({\n        cycleTime: 5,\n        cycleNumber: 0,\n        cycleDurationInMinutes: 25,\n        cycleCompleted: 0,\n        cycleMinimumTemperatureInFahrenheit: 60,\n        cycleMaximumTemperatureInFahrenheit: 80,\n        cycleFinalCirculationTemperatureInFahrenheit: 70,\n        cycleMinimumTurbidityInNTU: 0,\n        cycleMaximumTurbidityInNTU: 0\n    });\n});\n```\n\n### *dishwasher.cycleData1*\nThe cycle data is an object with the following fields:\n- cycleTime (the time of the cycle)\n- cycleNumber (the number of the cycle)\n- cycleDurationInMinutes (the duration of the cycle in minutes)\n- cycleCompleted (zero if the cycle is not complete, one if incomplete)\n- cycleMinimumTemperatureInFahrenheit (the minimum cycle temperature in Fahrenheit)\n- cycleMaximumTemperatureInFahrenheit (the maximum cycle temperature in Fahrenheit)\n- cycleFinalCirculationTemperatureInFahrenheit (the final circulation temperature in Fahrenheit)\n- cycleMinimumTurbidityInNTU (the minimum turbidity value in NTU)\n- cycleMaximumTurbidityInNTU (the maximum turbidity value in NTU)\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.cycleData1.read(function (value) {\n        console.log(\"cycle data 1 is:\", value);\n    });\n\n    dishwasher.cycleData1.subscribe(function (value) {\n        console.log(\"cycle data 1 changed:\", value);\n    });\n\n    dishwasher.cycleData1.write({\n        cycleTime: 5,\n        cycleNumber: 0,\n        cycleDurationInMinutes: 25,\n        cycleCompleted: 0,\n        cycleMinimumTemperatureInFahrenheit: 60,\n        cycleMaximumTemperatureInFahrenheit: 80,\n        cycleFinalCirculationTemperatureInFahrenheit: 70,\n        cycleMinimumTurbidityInNTU: 0,\n        cycleMaximumTurbidityInNTU: 0\n    });\n});\n```\n\n### *dishwasher.cycleData2*\nThe cycle data is an object with the following fields:\n- cycleTime (the time of the cycle)\n- cycleNumber (the number of the cycle)\n- cycleDurationInMinutes (the duration of the cycle in minutes)\n- cycleCompleted (zero if the cycle is not complete, one if incomplete)\n- cycleMinimumTemperatureInFahrenheit (the minimum cycle temperature in Fahrenheit)\n- cycleMaximumTemperatureInFahrenheit (the maximum cycle temperature in Fahrenheit)\n- cycleFinalCirculationTemperatureInFahrenheit (the final circulation temperature in Fahrenheit)\n- cycleMinimumTurbidityInNTU (the minimum turbidity value in NTU)\n- cycleMaximumTurbidityInNTU (the maximum turbidity value in NTU)\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.cycleData2.read(function (value) {\n        console.log(\"cycle data 2 is:\", value);\n    });\n\n    dishwasher.cycleData2.subscribe(function (value) {\n        console.log(\"cycle data 2 changed:\", value);\n    });\n\n    dishwasher.cycleData2.write({\n        cycleTime: 5,\n        cycleNumber: 0,\n        cycleDurationInMinutes: 25,\n        cycleCompleted: 0,\n        cycleMinimumTemperatureInFahrenheit: 60,\n        cycleMaximumTemperatureInFahrenheit: 80,\n        cycleFinalCirculationTemperatureInFahrenheit: 70,\n        cycleMinimumTurbidityInNTU: 0,\n        cycleMaximumTurbidityInNTU: 0\n    });\n});\n```\n\n### *dishwasher.cycleData3*\nThe cycle data is an object with the following fields:\n- cycleTime (the time of the cycle)\n- cycleNumber (the number of the cycle)\n- cycleDurationInMinutes (the duration of the cycle in minutes)\n- cycleCompleted (zero if the cycle is not complete, one if incomplete)\n- cycleMinimumTemperatureInFahrenheit (the minimum cycle temperature in Fahrenheit)\n- cycleMaximumTemperatureInFahrenheit (the maximum cycle temperature in Fahrenheit)\n- cycleFinalCirculationTemperatureInFahrenheit (the final circulation temperature in Fahrenheit)\n- cycleMinimumTurbidityInNTU (the minimum turbidity value in NTU)\n- cycleMaximumTurbidityInNTU (the maximum turbidity value in NTU)\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.cycleData3.read(function (value) {\n        console.log(\"cycle data 3 is:\", value);\n    });\n\n    dishwasher.cycleData3.subscribe(function (value) {\n        console.log(\"cycle data 3 changed:\", value);\n    });\n\n    dishwasher.cycleData3.write({\n        cycleTime: 5,\n        cycleNumber: 0,\n        cycleDurationInMinutes: 25,\n        cycleCompleted: 0,\n        cycleMinimumTemperatureInFahrenheit: 60,\n        cycleMaximumTemperatureInFahrenheit: 80,\n        cycleFinalCirculationTemperatureInFahrenheit: 70,\n        cycleMinimumTurbidityInNTU: 0,\n        cycleMaximumTurbidityInNTU: 0\n    });\n});\n```\n\n### *dishwasher.cycleData4*\nThe cycle data is an object with the following fields:\n- cycleTime (the time of the cycle)\n- cycleNumber (the number of the cycle)\n- cycleDurationInMinutes (the duration of the cycle in minutes)\n- cycleCompleted (zero if the cycle is not complete, one if incomplete)\n- cycleMinimumTemperatureInFahrenheit (the minimum cycle temperature in Fahrenheit)\n- cycleMaximumTemperatureInFahrenheit (the maximum cycle temperature in Fahrenheit)\n- cycleFinalCirculationTemperatureInFahrenheit (the final circulation temperature in Fahrenheit)\n- cycleMinimumTurbidityInNTU (the minimum turbidity value in NTU)\n- cycleMaximumTurbidityInNTU (the maximum turbidity value in NTU)\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.cycleData4.read(function (value) {\n        console.log(\"cycle data 4 is:\", value);\n    });\n\n    dishwasher.cycleData4.subscribe(function (value) {\n        console.log(\"cycle data 4 changed:\", value);\n    });\n\n    dishwasher.cycleData4.write({\n        cycleTime: 5,\n        cycleNumber: 0,\n        cycleDurationInMinutes: 25,\n        cycleCompleted: 0,\n        cycleMinimumTemperatureInFahrenheit: 60,\n        cycleMaximumTemperatureInFahrenheit: 80,\n        cycleFinalCirculationTemperatureInFahrenheit: 70,\n        cycleMinimumTurbidityInNTU: 0,\n        cycleMaximumTurbidityInNTU: 0\n    });\n});\n```\n\n### *dishwasher.dryDrainCounters*\nThe dry drain counters are an object with the following fields:\n- noDryDrainDetectedCount (the number of times a dry-drain did not occur)\n- noDryDrainDetectedMaximumValue (the maximum value a dry-drain cannot occur)\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.dryDrainCounters.read(function (value) {\n        console.log(\"dry drain counters are:\", value);\n    });\n\n    dishwasher.dryDrainCounters.subscribe(function (value) {\n        console.log(\"dry drain counters changed:\", value);\n    });\n\n    dishwasher.dryDrainCounters.write({\n        noDryDrainDetectedCount: 5,\n        noDryDrainDetectedMaximumValue: 45\n    });\n});\n```\n\n### *dishwasher.tubLight*\nThe tub light is an object with the following field:\n- dutyCyclePercentage (the duty cycle percentage between 0 and 100, inclusive)\n\n``` javascript\nvar greenBean = require(\"green-bean\");\n\ngreenBean.connect(\"dishwasher\", function(dishwasher) {\n    dishwasher.tubLight.read(function (value) {\n        console.log(\"tub light is:\", value);\n    });\n\n    dishwasher.tubLight.subscribe(function (value) {\n        console.log(\"tub light changed:\", value);\n    });\n\n    dishwasher.tubLight.write({\n        dutyCyclePercentage: 50\n    });\n});\n```\n\n## Appendix\n\n### Operating mode\nThe following is a list of the available operating modes and their enumerated value.\n\n| Value   | Name                 |\n|:-------:|:---------------------|\n| 0       | Low Power            |\n| 1       | Power Up             |\n| 2       | Standby              |\n| 3       | Delay Start          |\n| 4       | Pause                |\n| 5       | Cycle Active         |\n| 6       | End of Cycle         |\n| 7       | Download Mode        |\n| 8       | Sensor Check Mode    |\n| 9       | Load Activation Mode |\n\n### Disabled features\nThe following is a diagram of the value for each bit in the disabled features.\nIf the bit is set (value is 1) then that feature is disabled.\nIf the bit is cleared (value is 0) then that feature is enabled.\n\n| Bit     | Description              |\n|:-------:|:-------------------------|\n| 0       | Heated Dry               |\n| 1       | Boost                    |\n| 2       | Sanitize                 |\n| 3       | Wash Zones               |\n| 4       | Steam                    |\n| 5       | Bottle Blast             |\n| 6+      | Reserved                 |\n\n### Reminders\nThe following is a diagram of the value for each bit in the reminders.\nIf the bit is set (value is 1) then the reminder is active.\nIf the bit is cleared (value is 0) then the reminders is not active.\n\n| Bit     | Description              |\n|:-------:|:-------------------------|\n| 0       | Clean Filter             |\n| 1       | Add Rinse Aid            |\n| 2       | Sanitized                |\n\n### User configuration\nThe following is a diagram of the value for each bit in the user configuration.\nThere are three configuration bytes, each described below.\n\n| Bit     | Description    |\n|:-------:|:---------------|\n| 0-3     | Delay Start    |\n| 4-5     | Zone Selected  |\n| 6       | Demo Mode      |\n| 7       | Mute           |\n\n| Bit     | Description         |\n|:-------:|:--------------------|\n| 0       | Steam               |\n| 1       | UI Locked           |\n| 2-3     | Dry Options         |\n| 4-6     | Wash Temp           |\n| 7       | Rinse Aid Enabled   |\n\n| Bit     | Description         |\n|:-------:|:--------------------|\n| 0       | Bottle Blast        |\n| 1-4     | Selected Cycle      |\n| 5       | Leak Detect Enabled |\n| 6+      | Reserved            |\n\n### Control lock\nThe following is a list of the available control locks and their enumerated value.\n\n| Value   | Name     |\n|:-------:|:---------|\n| 0x55    | Locked   |\n| 0xAA    | Unlocked |\n\n### Personality source\nThe following is a list of the available personality sources and their enumerated value.\n\n| Value   | Name                  |\n|:-------:|:----------------------|\n| 0       | Bootloader Parametric |\n| 1       | A/D                   |\n\n### Cycle state\nThe following is a list of the available cycle states and their enumerated value.\n\n| Value   | Name                    |\n|:-------:|:------------------------|\n| 1       | PreWash                 |\n| 2       | Sensing                 |\n| 3       | MainWash                |\n| 4       | Drying                  |\n| 5       | Sanitizing              |\n| 6       | Turbidity Calibration   |\n| 7       | Diverter Calibration    |\n| 8       | Pause                   |\n| 9       | Rinsing                 |\n| 10      | Cycle Inactive          |\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/GEMakers/gea-plugin-dishwasher.git"
  },
  "version": "0.1.0"
}
