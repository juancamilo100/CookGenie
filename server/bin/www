#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('CookGenie:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/////Alexa server
var greenBean = require("green-bean");
var recipeIndex  = 1;
var currentStep= 0;
var serial = require('serialport');
var fork = require('child_process').fork;
var io = require('socket.io')(server);


var port = new serial('/dev/tty.usbmodem1421', {
	baudRate: 9600,
	parser: serial.parsers.readline('\n')
});


port.on('error', function(err) {
	console.log('Error Serial: ', err.message);
});


port.on('data', function(data) {
  console.log('got it:'+data);

  if(data.trim().toLowerCase()=="something"){
    // currentStep=23;
    // port.write(recipeIndex+''+currentStep);
		// try{
			sendCommandToOven(450, 0, 30);
			port.write(recipeIndex+''+currentStep);
		// }catch(err){console.log('error');}


  }else if(data.trim().toLowerCase().indexOf("startrecipe")> -1){
			recipeIndex = data.trim().split(';')[1];
			currentStep =0;
      io.emit('displayRecipe', { index: recipeIndex });
      port.write(recipeIndex+''+currentStep);
  }else if(data.trim().toLowerCase()=="nextstep"){
		currentStep+=1;
    port.write(recipeIndex+''+currentStep);
    io.emit('nextstep', { step: currentStep, recipe: recipeIndex });
  }else if(data.trim().toLowerCase().indexOf("preheatoven")>-1){
		 var temperature = data.trim().split(';')[1];
		console.log('preheating: '+temperature);
		currentStep+=1;
  	port.write(recipeIndex+''+currentStep);
    io.emit('nextstep', { step: currentStep, recipe: recipeIndex });
	 	sendCommandToOven(temperature, 0, 0);
  }else if(data.trim().toLowerCase().indexOf("ovenprofile")>-1){
		 var temperature = data.trim().split(';')[1];
		 var minutes = data.trim().split(';')[2];
		console.log('cooking temp: '+temperature+', cooking time:'+minutes);
		// currentStep+=1;
  	port.write(recipeIndex+''+currentStep);
	 	sendCommandToOven(temperature, 0, minutes);
    io.emit('showmessage', { title: "Cooking", message: "Cooking your food at "+temperature+" degrees." });
  }
	else if(data.trim().toLowerCase()=="current"){
      port.write(recipeIndex+''+currentStep);
  }else if(data.trim().toLowerCase()=="reset"){
      currentStep = 23;
      port.write(recipeIndex+''+currentStep);
  }else if(data.trim().toLowerCase().indexOf("repeat")> -1){
      port.write(recipeIndex+''+currentStep);
  }

});

function sendCommandToOven(temp, hours, minutes){
	var exec = require('child_process').exec;
	exec('node ~/Documents/hackaton/repo/CookGenie/OvenControl/ovenPreheat.js '+temp+' '+minutes, function(error, stdout, stderr) {
	    // console.log('stdout: ' + stdout);
	    // console.log('stderr: ' + stderr);
	    if (error !== null) {
	        // console.log('exec error: ' + error);
	    }
	});


}
