{
  "_args": [
    [
      {
        "raw": "gea-sdk@git+https://github.com/GEMakers/gea-sdk.git",
        "scope": null,
        "escapedName": "gea-sdk",
        "name": "gea-sdk",
        "rawSpec": "git+https://github.com/GEMakers/gea-sdk.git",
        "spec": "git+https://github.com/GEMakers/gea-sdk.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:GEMakers/gea-sdk.git",
          "sshUrl": "git+ssh://git@github.com/GEMakers/gea-sdk.git",
          "httpsUrl": "git+https://github.com/GEMakers/gea-sdk.git",
          "gitUrl": "git://github.com/GEMakers/gea-sdk.git",
          "shortcut": "github:GEMakers/gea-sdk",
          "directUrl": "https://raw.githubusercontent.com/GEMakers/gea-sdk/master/package.json"
        }
      },
      "/Users/lauraartunduaga/Documents/CodeLouisville/Hackathon/CookGEnie/node_modules/green-bean"
    ]
  ],
  "_from": "git+https://github.com/GEMakers/gea-sdk.git",
  "_id": "gea-sdk@0.1.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/gea-sdk",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gea-sdk@git+https://github.com/GEMakers/gea-sdk.git",
    "scope": null,
    "escapedName": "gea-sdk",
    "name": "gea-sdk",
    "rawSpec": "git+https://github.com/GEMakers/gea-sdk.git",
    "spec": "git+https://github.com/GEMakers/gea-sdk.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:GEMakers/gea-sdk.git",
      "sshUrl": "git+ssh://git@github.com/GEMakers/gea-sdk.git",
      "httpsUrl": "git+https://github.com/GEMakers/gea-sdk.git",
      "gitUrl": "git://github.com/GEMakers/gea-sdk.git",
      "shortcut": "github:GEMakers/gea-sdk",
      "directUrl": "https://raw.githubusercontent.com/GEMakers/gea-sdk/master/package.json"
    }
  },
  "_requiredBy": [
    "/gea-plugin-dishwasher",
    "/gea-plugin-laundry",
    "/gea-plugin-range",
    "/gea-plugin-refrigerator",
    "/gea-plugin-water-heater",
    "/green-bean"
  ],
  "_resolved": "git+https://github.com/GEMakers/gea-sdk.git#b890757bbf1a33da4988774adc8c2d04e80589bd",
  "_shasum": "7c497db417f7a5ce4d1c6bd3d26a7b36241cf861",
  "_shrinkwrap": null,
  "_spec": "gea-sdk@git+https://github.com/GEMakers/gea-sdk.git",
  "_where": "/Users/lauraartunduaga/Documents/CodeLouisville/Hackathon/CookGEnie/node_modules/green-bean",
  "author": {
    "name": "Christopher Baker",
    "email": "christopher.baker2@ge.com"
  },
  "bugs": {
    "url": "https://github.com/GEMakers/gea-sdk/issues"
  },
  "dependencies": {
    "binary-stream": "git+https://github.com/GEMakers/binary-stream.git"
  },
  "description": "General Electric Appliance SDK",
  "devDependencies": {},
  "gitHead": "b890757bbf1a33da4988774adc8c2d04e80589bd",
  "homepage": "http://www.ge.com/",
  "keywords": [
    "GE",
    "GEA",
    "SDK",
    "General Electric",
    "appliance"
  ],
  "main": "src/main.js",
  "name": "gea-sdk",
  "optionalDependencies": {},
  "readme": "# GE Appliance Software Development Kit\n\nThis node.js package provides a framework for communicating with General Electric appliances.\nThere are three distinct APIs available for communicating to an appliance.\nEach API offers a unique level of abstraction to suit as many different technical levels as possible.\n\n## Table of Contents\n\n- [Installation](#installation)\n- [API](#api)\n  - [gea.configure(configuration)](#geaconfigureconfiguration)\n    - [application.plugin(plugin)](#applicationpluginplugin)\n    - [application.bind(adapter, callback)](#applicationbindadapter-callback)\n      - [bus.send(message)](#bussendmessage)\n      - [bus.on(\"message\", callback)](#busonmessage-callback)\n      - [bus.read(erd)](#busreaderd)\n      - [bus.on(\"read-response\", callback)](#busonread-response-callback)\n      - [bus.write(erd)](#buswriteerd)\n      - [bus.on(\"write-response\", callback)](#busonwrite-response-callback)\n      - [bus.subscribe(erd)](#bussubscribeerd)\n      - [bus.on(\"publish\", callback)](#busonpublish-callback)\n      - [bus.publish(erd)](#buspublisherd)\n      - [bus.on(\"subscribe\", callback)](#busonsubscribe-callback)\n      - [bus.on(\"read\", callback)](#busonread-callback)\n      - [bus.on(\"write\", callback)](#busonwrite-callback)\n      - [bus.endpoint(source, destination)](#busendpointsource-destination)\n      - [bus.on(\"appliance\", callback)](#busonappliance-callback)\n      - [bus.create(\"appliance\", callback)](#buscreateappliance-callback)\n        - [appliance.send(command, data, callback)](#appliancesendcommand-data-callback)\n        - [appliance.on(\"message\", callback)](#applianceonmessage-callback)\n        - [appliance.read(erd, callback)](#appliancereaderd-callback)\n        - [appliance.write(erd, data, callback)](#appliancewriteerd-data-callback)\n        - [appliance.subscribe(erd, callback)](#appliancesubscribeerd-callback)\n        - [appliance.publish(erd, data)](#appliancepublisherd-data)\n        - [appliance.on(\"read\", callback)](#applianceonread-callback)\n        - [appliance.on(\"write\", callback)](#applianceonwrite-callback)\n        - [appliance.command(type)](#appliancecommandtype)\n        - [appliance.erd(type)](#applianceerdtype)\n        - [appliance.modelNumber](#appliancemodelnumber)\n        - [appliance.serialNumber](#applianceserialnumber)\n        - [appliance.remoteEnable](#applianceremoteenable)\n        - [appliance.userInterfaceLock](#applianceuserinterfacelock)\n        - [appliance.clockTime](#applianceclocktime)\n        - [appliance.clockFormat](#applianceclockformat)\n        - [appliance.temperatureDisplayUnits](#appliancetemperaturedisplayunits)\n        - [appliance.applianceType](#applianceappliancetype)\n        - [appliance.sabbathMode](#appliancesabbathmode)\n        - [appliance.soundLevel](#appliancesoundlevel)\n- [Appendix](#appendix)\n  - [Remote enable state](#remote-enable-state)\n  - [User interface state](#user-interface-state)\n  - [Clock format](#clock-format)\n  - [Temperature units](#temperature-units)\n  - [Appliance types](#appliance-types)\n  - [Sabbath modes](#sabbath-modes)\n  - [Sound levels](#sound-levels)\n\n## Installation\nTo install this package using the node.js package manager, issue the following commands:\n\n```\nnpm install git+https://github.com/GEMakers/gea-sdk.git\n```\n\n## API\nBelow is the documentation for each of the functions provided by this package, as well as a few examples showing how to use them.\n\n### *gea.configure(configuration)*\nThis function will configure settings for an application using the SDK.\nAn application object is returned that may be used to bind to the bus.\nThe *configuration* object has the following fields:\n- address (the default source address for outgoing messages sent from the application)\n- version (the version of the application, *defaults to undefined*)\n\n``` javascript\nvar gea = require(\"gea-sdk\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n```\n\n### *application.plugin(plugin)*\nThis function will load the *plugin* as an extension to the application.\n\n``` javascript\nvar gea = require(\"gea-sdk\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// load the plugin to gain access to refrigerator functions\napp.plugin(require(\"gea-plugin-refrigerator\"));\n```\n\n### *application.bind(adapter, callback)*\nThis function will use the *adapter* to bind to an address on the bus.\nThe *callback* will be called for each instance of the bus that was found.\nNote that the adapters are separate node.js packages, and are not included in the SDK.\nThis allows the community to create unique adapters for different communication protocols.\nThe supported adapters are [USB](https://github.com/GEMakers/gea-adapter-usb) and [UDP](https://github.com/GEMakers/gea-adapter-udp).\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n    console.log(\"bind was successful\");\n});\n```\n\n### *bus.send(message)*\nThis function will send a message to an endpoint on the *bus*.\nThe *message* object has the following fields:\n- command (the command identifier of the message)\n- data (the command payload represented as an array of bytes, *defaults to []*)\n- destination (the address to send the message to, *defaults to broadcast address 0xff*)\n- source (the address that is sending the message, *defaults to configuration address*)\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n\n    // send a message\n    bus.send({\n        command: 0x01,\n        data: [ 1, 2, 3, 4 ],\n        source: 0xcb,\n        destination: 0xff\n    });\n});\n```\n\n### *bus.on(\"message\", callback)*\nThis event is emitted when a message is received on the *bus*.\nThe *message* object has the following fields:\n- command (the command identifier of the message)\n- data (the command payload represented as an array of bytes)\n- destination (the address to send the message to)\n- source (the address that is sending the message)\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n\n    // listen for messages on the bus\n    bus.on(\"message\", function (message) {\n        console.log(\"message:\", message);\n    });\n});\n```\n\n### *bus.read(erd)*\nThis function will read an Entity Reference Designator (ERD) from an endpoint on the *bus*.\nThe *erd* object has the following fields:\n- erd (the ERD identifier)\n- destination (the address that owns the ERD, *defaults to broadcast address 0xff*)\n- source (the address that is requesting the ERD read, *defaults to configuration address*)\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n\n    // read an ERD\n    bus.read({\n        erd: 0x5100,\n        source: 0xcb,\n        destination: 0x80\n    });\n});\n```\n\n### *bus.on(\"read-response\", callback)*\nThis event is emitted when the response to a read request is received on the *bus*.\nThe *erd* object has the following fields:\n- erd (the ERD identifier)\n- data (the ERD data represented as an array of bytes)\n- destination (the address that requested the ERD read)\n- source (the address that responded to the ERD read request)\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n\n    // listen for read responses for an ERD\n    bus.on(\"read-response\", function (erd) {\n        console.log(\"read response:\", erd);\n    });\n});\n```\n\n### *bus.write(erd)*\nThis function will write an Entity Reference Designator (ERD) from an endpoint on the *bus*.\nThe *erd* object has the following fields:\n- erd (the ERD identifier)\n- data (the ERD data represented as an array of bytes, *defaults to []*)\n- destination (the address that owns the ERD, *defaults to broadcast address 0xff*)\n- source (the address that is requesting the ERD write, *defaults to configuration address*)\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n\n    // write an ERD\n    bus.write({\n        source: 0xcb,\n        destination: 0x80,\n        erd: 0x5100,\n        data: [0x12, 0x01, 0x5e, 0x01, 0x00,\n               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]\n    });\n});\n```\n\n### *bus.on(\"write-response\", callback)*\nThis event is emitted when the response to a write request is received on the *bus*.\nThe *erd* object has the following fields:\n- erd (the ERD identifier)\n- destination (the address that requested the ERD read)\n- source (the address that responded to the ERD read request)\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n\n    // listen for write responses for an ERD\n    bus.on(\"write-response\", function (erd) {\n        console.log(\"write response:\", erd);\n    });\n});\n```\n\n### *bus.subscribe(erd)*\nThis function will subscribe to changes for an Entity Reference Designator (ERD) from an endpoint on the *bus*.\nThe *erd* object has the following fields:\n- erd (the ERD identifier)\n- destination (the address that owns the ERD, *defaults to broadcast address 0xff*)\n- source (the address that is requesting the ERD subscription, *defaults to configuration address*)\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n\n    // write an ERD\n    bus.write({\n        source: 0xcb,\n        destination: 0x80,\n        erd: 0x5100,\n        data: [0x12, 0x01, 0x5e, 0x01, 0x00,\n               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]\n    });\n});\n```\n\n### *bus.on(\"publish\", callback)*\nThis event is emitted when an Entity Reference Designator (ERD) is published on the *bus*.\nThe *erd* object has the following fields:\n- erd (the ERD identifier)\n- data (the ERD data represented as an array of bytes)\n- destination (the address that subscribed to the ERD)\n- source (the address that published the ERD)\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n\n    // listen for publishes for an ERD\n    bus.on(\"publish\", function (erd) {\n        console.log(\"publish:\", erd);\n    });\n});\n```\n\n### *bus.publish(erd)*\nThis function will publish changes for an Entity Reference Designator (ERD) to an endpoint on the *bus*.\nThe *erd* object has the following fields:\n- erd (the ERD identifier)\n- data (the ERD data represented as an array of bytes, *defaults to []*)\n- destination (the address to publish to, *defaults to broadcast address 0xff*)\n- source (the address that owns the ERD, *defaults to configuration address*)\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0x80,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n\n    // publish an ERD\n    bus.publish({\n        source: 0x80,\n        destination: 0xbf,\n        erd: 0x5100,\n        data: [0x12, 0x01, 0x5e, 0x01, 0x00,\n               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]\n    });\n});\n```\n\n### *bus.on(\"subscribe\", callback)*\nThis event is emitted when an endpoint requests to subscribe to an Entity Reference Designator (ERD) on the *bus*.\nThe *erd* object has the following fields:\n- erd (the ERD identifier)\n- destination (the address that subscribed to the ERD)\n- source (the address that published the ERD)\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n\n    // listen for publishes for an ERD\n    bus.on(\"subscribe\", function (erd) {\n        console.log(\"subscribe request:\", erd);\n    });\n});\n```\n\n### *bus.on(\"read\", callback)*\nThis event is emitted when an endpoint requests to read an Entity Reference Designator (ERD) on the *bus*.\nThe *erd* object has the following fields:\n- erd (the ERD identifier)\n- destination (the address that subscribed to the ERD)\n- source (the address that published the ERD)\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n\n    // listen for reads for an ERD\n    bus.on(\"read\", function (erd, callback) {\n        console.log(\"read request:\", erd);\n        // callback(); // uncomment this to return an error\n        // callback([0, 0, 0, 0]); // uncomment this to return with data\n    });\n});\n```\n\n### *bus.on(\"write\", callback)*\nThis event is emitted when an endpoint requests to write an Entity Reference Designator (ERD) on the *bus*.\nThe *erd* object has the following fields:\n- erd (the ERD identifier)\n- data (the ERD data represented as an array of bytes)\n- destination (the address that subscribed to the ERD)\n- source (the address that published the ERD)\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n\n    // listen for writes for an ERD\n    bus.on(\"write\", function (erd, callback) {\n        console.log(\"write request:\", erd);\n        // callback(new Error(\"An error occurred\")); uncomment this to return an error\n        // callback(); // uncomment this to return with success\n    });\n});\n```\n\n### *bus.endpoint(source, destination)*\nThis function will create an endpoint object that is discoverable to other endpoints on the *bus*.\nAll messages sent via the endpoint will be from the *source* address and delivered to the *destination* address.\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n    var endpoint = bus.endpoint(0xcb, 0x80);\n    \n    // send a command to the endpoint\n    endpoint.send(0x01, [], function (data) {\n        console.log(\"response:\", data);\n    });\n});\n```\n\n### *bus.on(\"appliance\", callback)*\nThis event is emitted whenever an appliance has been discovered on the bus.\nFor each appliance that is discovered, the *callback* is called with the appliance object as an argument.\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n    bus.on(\"appliance\", function (appliance) {\n        console.log(\"address:\", appliance.address);\n        console.log(\"version:\", appliance.version.join(\".\"));\n    });\n});\n```\n\n### *bus.create(\"appliance\", callback)*\nThis function will create an appliance object that is discoverable to other endpoints on the *bus*.\nOnce the appliance is created, the *callback* is called with the appliance object as an argument.\nThe appliance address and version are pulled from the application configuration.\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n    bus.create(\"appliance\", function (appliance) {\n        console.log(\"address:\", appliance.address);\n        console.log(\"version:\", appliance.version.join(\".\"));\n    });\n});\n```\n\n### *appliance.send(command, data, callback)*\nThis function will send a command to the *appliance*.\nThe *command* argument is the command identifier.\nThe *data* argument is the command payload represented as an array of bytes.\nThe optional *callback* argument is a function to be called when a response is received.\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n    bus.on(\"appliance\", function (appliance) {\n\n        // send a command to the appliance\n        appliance.send(0x01, [], function (data) {\n            console.log(\"response:\", data);\n        });\n    });\n});\n```\n\n### *appliance.on(\"message\", callback)*\nThis event is emitted when a message is received from the *appliance*.\nThe *message* object has the following fields:\n- command (the command identifier of the message)\n- data (the command payload represented as an array of bytes)\n- destination (the address to send the message to)\n- source (the address that is sending the message)\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n    bus.on(\"appliance\", function (appliance) {\n\n        // listen for messages from the appliance\n        appliance.on(\"message\", function (message) {\n            console.log(\"message:\", message);\n        });\n    });\n});\n```\n\n### *appliance.read(erd, callback)*\nThis function will read an Entity Reference Designator (ERD) owned by the *appliance*.\nThe *erd* argument is the ERD identifier.\nThe optional *callback* argument is a function to be called when a response is received.\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n    bus.on(\"appliance\", function (appliance) {\n\n        // read an ERD from the appliance\n        appliance.read(0x5100, function (data) {\n            console.log(\"response:\", data);\n        });\n    });\n});\n```\n\n### *appliance.write(erd, data, callback)*\nThis function will write an Entity Reference Designator (ERD) owned by the *appliance*.\nThe *erd* argument is the ERD identifier.\nThe *data* argument is the ERD data represented as an array of bytes.\nThe optional *callback* argument is a function to be called when a response is received.\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n    bus.on(\"appliance\", function (appliance) {\n\n        // write an ERD owned by the appliance\n        appliance.write(0x5100, [0x12, 0x01, 0x5e, 0x01, 0x00,\n           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\n    });\n});\n```\n\n### *appliance.subscribe(erd, callback)*\nThis function will subscribe to changes for an Entity Reference Designator (ERD) owned by the *appliance*.\nThe *erd* argument is the ERD identifier.\nThe optional *callback* argument is a function to be called when a publish is received.\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0xcb,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n    bus.on(\"appliance\", function (appliance) {\n\n        // subscribe to changes for an ERD owned by the appliance\n        appliance.subscribe(0x5100, function (data) {\n            console.log(\"value changed:\", data);\n        });\n    });\n});\n```\n\n### *appliance.publish(erd, data)*\nThis function will publish an Entity Reference Designator (ERD) owned by the *appliance*.\nThe *erd* argument is the ERD identifier.\nThe *data* argument is the ERD data represented as an array of bytes.\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0x80,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n    bus.on(\"appliance\", function (appliance) {\n\n        // publish an ERD owned by the appliance\n        appliance.publish(0x5100, [0x12, 0x01, 0x5e, 0x01, 0x00,\n           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\n    });\n});\n```\n\n### *appliance.on(\"read\", callback)*\nThis event is emitted when an endpoint requests to read an Entity Reference Designator (ERD) owned by the *appliance*.\nThe *erd* object has the following fields:\n- erd (the ERD identifier)\n- destination (the address that subscribed to the ERD)\n- source (the address that published the ERD)\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0x80,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n    bus.create(\"appliance\", function (appliance) {\n    \n        // listen for reads for an ERD\n        appliance.on(\"read\", function (erd, callback) {\n            console.log(\"read request:\", erd);\n            // callback(); // uncomment this to return an error\n            // callback([0, 0, 0, 0]); // uncomment this to return with data\n        });\n    });\n});\n```\n\n### *appliance.on(\"write\", callback)*\nThis event is emitted when an endpoint requests to write an Entity Reference Designator (ERD) owned by the *appliance*.\nThe *erd* object has the following fields:\n- erd (the ERD identifier)\n- data (the ERD data represented as an array of bytes)\n- destination (the address that subscribed to the ERD)\n- source (the address that published the ERD)\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0x80,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n    bus.create(\"appliance\", function (appliance) {\n    \n        // listen for writes to an ERD\n        appliance.on(\"write\", function (erd, callback) {\n            console.log(\"write request:\", erd);\n            // callback(new Error(\"An error occurred\")); uncomment this to return an error\n            // callback(); // uncomment this to return with success\n        });\n    });\n});\n```\n\n### *appliance.command(type)*\nThis function will return an object to control functionality of a single command owned by the *appliance*.\nThe *type* argument contains meta-data for identifying and serializing the command.\n- command (the command identifier)\n- endian (\"big\" for big endian or \"little\" for little endian, *optional*)\n- format (the serialization format: arrays create objects, strings create values)\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0x00,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n    bus.create(\"appliance\", function (appliance) {\n    \n        // create a version command object\n        var versionCommand = appliance.command({\n            command: 0x01,\n            format: \"Bytes\"\n        });\n        \n        // listen for reads on the version command\n        versionCommand.on(\"read\", function (callback) {\n            callback([ 0, 0, 1, 0 ]);\n        });\n    \n        // create a door state command object\n        var doorStateCommand = appliance.command({\n            command: 0x23,\n            format: [\n                \"doorState:UInt8\",\n                \"dcSwitchState:UInt8\",\n                \"acInputState:UInt8\"\n            ]\n        });\n        \n        // listen for reads on the door state command\n        doorStateCommand.on(\"read\", function (callback) {\n            callback({\n                doorState: 0x00,\n                dcSwitchState: 0x01,\n                acInputState: 0x02\n            });\n        });\n    });\n});\n```\n\n### *appliance.erd(type)*\nThis function will return an object to control functionality of a single Entity Reference Designator (ERD) owned by the *appliance*.\nThe *type* argument contains meta-data for identifying and serializing the ERD.\n- erd (the ERD identifier)\n- endian (\"big\" for big endian or \"little\" for little endian, *optional*)\n- format (the serialization format: arrays create objects, strings create values)\n\n``` javascript\nvar gea = require(\"gea-sdk\");\nvar adapter = require(\"gea-adapter-usb\");\n\n// configure the application\nvar app = gea.configure({\n    address: 0x00,\n    version: [ 0, 0, 1, 0 ]\n});\n\n// bind to the adapter to access the bus\napp.bind(adapter, function (bus) {\n    bus.create(\"appliance\", function (appliance) {\n    \n        // create a filter alert ERD object\n        var filterAlert = appliance.erd({\n            erd: 0x1000,\n            format: \"UInt8\"\n        });\n        \n        // listen for reads on the filter alert ERD\n        versionCommand.on(\"read\", function (callback) {\n            callback(1);\n        });\n    \n        // create a filter expiration status ERD object\n        var filterExpirationStatus = appliance.erd({\n            erd: 0x1001,\n            endian: \"big\",\n            format: [\n                \"waterFilterCalendarTimer:UInt16\",\n                \"waterFilterCalendarPercentUsed:UInt8\",\n                \"waterFilterHoursRemaining:UInt16\",\n                \"waterUsageTimer:UInt32\",\n                \"waterFilterUsageTimePercentUsed:UInt8\",\n                \"waterFilterOuncesRemaining:UInt32\"\n            ]\n        });\n        \n        // listen for reads on the filter expiration status ERD\n        filterExpirationStatus.on(\"read\", function (callback) {\n            callback({\n                waterFilterCalendarTimer: 0x00,\n                waterFilterCalendarPercentUsed: 0x01,\n                waterFilterHoursRemaining: 0x02,\n                waterUsageTimer: 0x03,\n                waterFilterUsageTimePercentUsed: 0x04,\n                waterFilterOuncesRemaining: 0x05\n            });\n        });\n    });\n});\n```\n\n### *appliance.modelNumber*\nThe model number is a read-only unique ASCII string for a particular model of an appliance. This is used to differentiate between feature sets within a single appliance type.\n\n``` javascript\napp.bind(adapter, function (bus) {\n    bus.on(\"appliance\", function (appliance) {\n        appliance.modelNumber.read(function (value) {\n            console.log(\"read:\", value);\n        });\n        \n        appliance.modelNumber.subscribe(function (value) {\n            console.log(\"subscribe:\", value);\n        });\n    });\n});\n```\n\n### *appliance.serialNumber*\nThe serial number is a read-only ASCII string representing the unique number programmed at the factory for this module. The serial number often contains things such as batch number and line number encoded in the string.\n\n``` javascript\napp.bind(adapter, function (bus) {\n    bus.on(\"appliance\", function (appliance) {\n        appliance.serialNumber.read(function (value) {\n            console.log(\"read:\", value);\n        });\n        \n        appliance.serialNumber.subscribe(function (value) {\n            console.log(\"subscribe:\", value);\n        });\n    });\n});\n```\n\n### *appliance.remoteEnable*\nThe remote enable is an integer value of the [remote enable state](#remote-enable-state) enumeration. *Note that this is not used if the appliance is either always or never able to be remotely controlled. This can be written to disable remote control, but not to enable it. To enable remote control the user must manually press the remote enable button on the user interface.*\n\n``` javascript\napp.bind(adapter, function (bus) {\n    bus.on(\"appliance\", function (appliance) {\n        appliance.remoteEnable.read(function (value) {\n            console.log(\"read:\", value);\n        });\n        \n        appliance.remoteEnable.subscribe(function (value) {\n            console.log(\"subscribe:\", value);\n        });\n        \n        appliance.remoteEnable.write(2);\n    });\n});\n```\n\n### *appliance.userInterfaceLock*\nThe user interface lock is an integer value of the [user interface state](#user-interface-state) enumeration. *Note that the user interface cannot be unlocked remotely.*\n\n``` javascript\napp.bind(adapter, function (bus) {\n    bus.on(\"appliance\", function (appliance) {\n        appliance.userInterfaceLock.read(function (value) {\n            console.log(\"read:\", value);\n        });\n        \n        appliance.userInterfaceLock.subscribe(function (value) {\n            console.log(\"subscribe:\", value);\n        });\n        \n        appliance.userInterfaceLock.write(1);\n    });\n});\n```\n\n### *appliance.clockTime*\nThe clock time that is displayed on the unit is an object with the following fields:\n- hours (the number of hours since midnight)\n- minutes (the number of minutes since the top of the hour)\n- seconds (the number of seconds since the top of the minute)\n\n``` javascript\napp.bind(adapter, function (bus) {\n    bus.on(\"appliance\", function (appliance) {\n        appliance.clockTime.read(function (value) {\n            console.log(\"read:\", value);\n        });\n        \n        appliance.clockTime.subscribe(function (value) {\n            console.log(\"subscribe:\", value);\n        });\n        \n        appliance.clockTime.write({\n            hours: 12,\n            minutes: 0,\n            seconds: 0\n        });\n    });\n});\n```\n\n### *appliance.clockFormat*\nThe clock format is an integer value of the [clock format](#clock-format) enumeration.\n\n``` javascript\napp.bind(adapter, function (bus) {\n    bus.on(\"appliance\", function (appliance) {\n        appliance.clockFormat.read(function (value) {\n            console.log(\"read:\", value);\n        });\n        \n        appliance.clockFormat.subscribe(function (value) {\n            console.log(\"subscribe:\", value);\n        });\n        \n        appliance.clockFormat.write(0);\n    });\n});\n```\n\n### *appliance.temperatureDisplayUnits*\nThe units used to display temperature are represented by an integer value of the [temperature units](#temperature-units) enumeration.\n\n``` javascript\napp.bind(adapter, function (bus) {\n    bus.on(\"appliance\", function (appliance) {\n        appliance.temperatureDisplayUnits.read(function (value) {\n            console.log(\"read:\", value);\n        });\n        \n        appliance.temperatureDisplayUnits.subscribe(function (value) {\n            console.log(\"subscribe:\", value);\n        });\n        \n        appliance.temperatureDisplayUnits.write(0);\n    });\n});\n```\n\n### *appliance.applianceType*\nThe appliance type is represented by a read-only integer value of the [appliance types](#appliance-types) enumeration.\n\n``` javascript\napp.bind(adapter, function (bus) {\n    bus.on(\"appliance\", function (appliance) {\n        appliance.applianceType.read(function (value) {\n            console.log(\"read:\", value);\n        });\n        \n        appliance.applianceType.subscribe(function (value) {\n            console.log(\"subscribe:\", value);\n        });\n    });\n});\n```\n\n### *appliance.sabbathMode*\nThe sabbath mode is represented by an integer value of the [sabbath modes](#sabbath-modes) enumeration.\n\n``` javascript\napp.bind(adapter, function (bus) {\n    bus.on(\"appliance\", function (appliance) {\n        appliance.sabbathMode.read(function (value) {\n            console.log(\"read:\", value);\n        });\n        \n        appliance.sabbathMode.subscribe(function (value) {\n            console.log(\"subscribe:\", value);\n        });\n        \n        appliance.sabbathMode.write(1);\n    });\n});\n```\n\n### *appliance.soundLevel*\nThe sound level is represented by an integer value of the [sound levels](#sound-levels) enumeration.\n\n``` javascript\napp.bind(adapter, function (bus) {\n    bus.on(\"appliance\", function (appliance) {\n        appliance.soundLevel.read(function (value) {\n            console.log(\"read:\", value);\n        });\n        \n        appliance.soundLevel.subscribe(function (value) {\n            console.log(\"subscribe:\", value);\n        });\n        \n        appliance.soundLevel.write(3);\n    });\n});\n```\n\n## Appendix\n\n### Remote enable state\nThe following is a list of the available remote enable states and their enumerated value.\n\n| Value   | Name                    |\n|:-------:|:------------------------|\n| 0       | Default                 |\n| 1       | Remote control enabled  |\n| 2       | Remote control disabled |\n\n### User interface state\nThe following is a list of the available user interface states and their enumerated value.\n\n| Value   | Name                    |\n|:-------:|:------------------------|\n| 0       | Default                 |\n| 1       | User interface locked   |\n| 2       | User interface unlocked |\n\n### Clock format\nThe following is a list of the available clock formats and their enumerated value.\n\n| Value   | Name                    |\n|:-------:|:------------------------|\n| 0       | 12-hour display         |\n| 1       | 24-hour display         |\n| 2       | No clock display        |\n\n### Temperature units\nThe following is a list of the available units of temperature and their enumerated value.\n\n| Value   | Name                    |\n|:-------:|:------------------------|\n| 0       | Degrees in Celsius      |\n| 1       | Degrees in Fahrenheit   |\n\n### Appliance types\nThe following is a list of the available appliance types and their enumerated value.\n\n| Value   | Name                    |\n|:-------:|:------------------------|\n| 0       | Water heater            |\n| 1       | Clothes dryer           |\n| 2       | Clothes washer          |\n| 3       | Refrigerator            |\n| 4       | Microwave               |\n| 5       | Advantium               |\n| 6       | Dishwasher              |\n| 7       | Oven                    |\n| 8       | Electric range          |\n| 9       | Gas range               |\n\n### Sabbath modes\nThe following is a list of the available sabbath modes and their enumerated value.\n\n| Value   | Name                    |\n|:-------:|:------------------------|\n| 0       | Sabbath mode disabled   |\n| 1       | Sabbath mode enabled    |\n\n### Sound levels\nThe following is a list of the available sound levels and their enumerated value.\n\n| Value   | Name                    |\n|:-------:|:------------------------|\n| 0       | No sound                |\n| 1       | Low sound               |\n| 2       | Medium sound            |\n| 3       | High sound              |\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/GEMakers/gea-sdk.git"
  },
  "version": "0.1.0"
}
